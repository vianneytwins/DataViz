// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);

      this.hide_groups = __bind(this.hide_groups, this);
      this.display_groups = __bind(this.display_groups, this);
      this.move_towards_group = __bind(this.move_towards_group, this);
      this.display_by_group = __bind(this.display_by_group, this);

      this.hide_alllabels = __bind(this.hide_alllabels, this);
      this.display_typos = __bind(this.display_typos, this);
      this.move_towards_typo = __bind(this.move_towards_typo, this);
      this.display_by_typo = __bind(this.display_by_typo, this);

      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      var max_amount;
      this.data = data;
      this.width = 940;
      this.height = 600;
      this.tooltip = CustomTooltip("gates_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.group_centers = {
        "lip": {
          x: this.width / 5,
          y: this.height / 2
        },
        "etf": {
          x: 2 * this.width / 5,
          y: this.height / 2
        },
        "ais": {
          x: 3 * this.width / 5,
          y: this.height / 2
        },
        "all": {
          x: 4 * this.width / 5,
          y: this.height / 2
        }
      };
      this.typo_centers = {
        "tpnc": {
          x: this.width / 5,
          y: this.height / 2
        },
        "risk": {
          x: 2 * this.width / 5,
          y: this.height / 2
        },
        "reporting": {
          x: 3 * this.width / 5,
          y: this.height / 2
        },
        "front": {
          x: 4 * this.width / 5,
          y: this.height / 2
        }
      };
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(["lip", "etf", "ais","all"]).range(["#a3778e", "#c6c6d1", "#c8d6e3", "#eff1ea"]);
      max_amount = d3.max(this.data, function(d) {
        return parseInt(d.total_amount);
      });
      this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      this.data.forEach((function(_this) {
        return function(d) {
          var node;
          node = {
            id: d.id,
            radius: _this.radius_scale(parseInt(d.total_amount)),
            value: d.total_amount,
            name: d.grant_title,
            org: d.organization,
            group: d.group,
            x: Math.random() * 900,
            y: Math.random() * 800
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.group);
        };
      })(this)).attr("stroke-width", 1).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();

      return this.hide_alllabels();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_group = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_group(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_groups();
    };

    BubbleChart.prototype.move_towards_group = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.group_centers[d.group];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_groups = function() {
      var labels;
      labels = this.hide_alllabels();

      var groups, groups_data, groups_x;
      groups_x = {
        "lip": 120,
        "etf": 2 * this.width / 5,
        "ais": 3 * this.width / 5,
        "all": 4 * this.width / 5,
      };
      groups_data = d3.keys(groups_x);
      groups = this.vis.selectAll(".groups").data(groups_data);
      return groups.enter().append("text").attr("class", "groups").attr("x", (function(_this) {
        return function(d) {
          return groups_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_groups = function() {
      var groups;
      return groups = this.vis.selectAll(".groups").remove();
    };

    BubbleChart.prototype.display_by_typo = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_typo(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_typos();
    };

    BubbleChart.prototype.move_towards_typo = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.typo_centers[d.org];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_typos = function() {
      var labels;
      labels = this.hide_alllabels();

      var typo, typos_data, typos_x;
      typos_x = {
        "tpnc": 120,
        "risk": 2 * this.width / 5,
        "reporting": 3 * this.width / 5,
        "front": 4 * this.width / 5
      };
      typos_data = d3.keys(typos_x);
      typos = this.vis.selectAll(".typos").data(typos_data);
      return typos.enter().append("text").attr("class", "typos").attr("x", (function(_this) {
        return function(d) {
          return typos_x[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_alllabels = function() {
      var typos;
      typos = this.vis.selectAll(".typos").remove();
      var groups;
      return groups = this.vis.selectAll(".groups").remove();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Application:</span><span class=\"value\"> " + data.name + "</span><br/>";
      content += "<span class=\"name\">Budget:</span><span class=\"value\"> â‚¬" + (addCommas(data.value)) + "</span><br/>";
      content += "<span class=\"name\">typology:</span><span class=\"value\"> " + data.org + "</span><br/>";
      content += "<span class=\"name\">BL:</span><span class=\"value\"> " + data.group + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this));
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_group = (function(_this) {
      return function() {
        return chart.display_by_group();
      };
    })(this);
    root.display_typo = (function(_this) {
      return function() {
        return chart.display_by_typo();
      };
    })(this);
    root.toggle_view = (function(_this) {
      return function(view_type) {
        if (view_type === 'group') {
          return root.display_group();
        }
        else if (view_type === 'typo') {
          return root.display_typo();
        }
        else {
          return root.display_all();
        }
      };
    })(this);
    return d3.csv("data/it_budget.csv", render_vis);
  });

}).call(this);
